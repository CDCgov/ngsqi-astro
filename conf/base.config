/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    astro Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    // TODO nf-core: Check the defaults for all processes
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // TODO nf-core: Customise requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }
    withName: BBDUK { 
        maxRetries = 3 
        cpus = { check_max( 12, 'cpus' ) } 
        memory = { check_max( task.attempt <= 3 ? 10.GB * task.attempt : 150.GB, 'memory' ) }
        time = { check_max( 8.h, 'time' ) }
    }
    withName: RGI {
        errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
        maxRetries = 3
        cpus   = { check_max(16 * task.attempt, 'cpus') }
        memory = { check_max(100.GB * task.attempt, 'memory') }
        time   = { check_max(48.h * task.attempt, 'time') }
        clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
    }
    withName: MEGAHIT {
        errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
        maxRetries = 3
        cpus   = { check_max(16 * task.attempt, 'cpus') }
        memory = { check_max(70.GB * task.attempt, 'memory') }
        time   = { check_max(48.h * task.attempt, 'time') }
        clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
    }
    withName: METAPHLAN {
        errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
        maxRetries = 3
        cpus   = { check_max(12 * task.attempt, 'cpus') }
        memory = { check_max(36.GB * task.attempt, 'memory') }
        time   = { check_max(4.h * task.attempt, 'time') }
        clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
    }
    withName: LOCALISOLATE {
        beforeScript = '''
            source /etc/profile.d/modules.sh
            module load python/3.7.1
        '''
    }
    withName: DOWNLOADISOLATE {
        beforeScript = '''
            source /etc/profile.d/modules.sh
            module load python/3.7.1
        '''
    }
    withName: PROCESSISOLATE {
        beforeScript = '''
            source /etc/profile.d/modules.sh
            module load python/3.7.1
        '''
    }
    withName: RAGTAGSCAFFOLD {
        beforeScript = '''
            source /etc/profile.d/modules.sh
            module load python/3.7.1
        '''
    }
    withName: NEATPAIRED {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
if (params.postsim) {
    process {      
        withName: 'ASTRO:TAXASIM:METAPHLAN' {
        errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
        maxRetries = 3
        cpus   = { check_max(12 * task.attempt, 'cpus') }
        memory = { check_max(36.GB * task.attempt, 'memory') }
        time   = { check_max(4.h * task.attempt, 'time') }
        clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
        }
        withName: 'ASTRO:CONTIGSIM:MEGAHIT' {
        errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
        maxRetries = 3
        cpus   = { check_max(16 * task.attempt, 'cpus') }
        memory = { check_max(70.GB * task.attempt, 'memory') }
        time   = { check_max(48.h * task.attempt, 'time') }
        clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
        }   
        withName: 'ASTRO:AMRSIM:RGI' {
        errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
        maxRetries = 3
        cpus   = { check_max(16 * task.attempt, 'cpus') }
        memory = { check_max(100.GB * task.attempt, 'memory') }
        time   = { check_max(48.h * task.attempt, 'time') }
        clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
        }
    }
}
}
