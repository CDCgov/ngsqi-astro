/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/versions" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/QC/fastqc/raw/" },
            mode: params.publish_dir_mode,
            pattern: "*.html"
        ]
        ext.prefix = { "${meta.id}_raw"}
    }
       withName: FASTQC_CLEAN {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/QC/fastqc/clean/" },
            mode: params.publish_dir_mode,
            pattern: "*.html"
        ]
        ext.prefix = { "${meta.id}_clean"}
    }
    withName: FASTP {
        ext.args = [
            "--cut_front",
            "--cut_tail",
            "--average_qual 20",
            "--length_required 50"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/QC/fastp/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{json,html,log}"
        ]
        ext.prefix = { "${meta.id}"}
    }
        withName: BBDUK {
        publishDir = [
            path: { "${params.outdir}/QC/bbduk/" },
            mode: params.publish_dir_mode,
            pattern: "*.log"
        ]
    }
        withName: HOSTILE {
        publishDir = [
            path: { "${params.outdir}/QC/hostile/" },
            mode: params.publish_dir_mode,
            pattern: "*.log"
        ]
    }
        withName: EXTRACT_READ_LENGTH {
        publishDir = [
            path: { "${params.outdir}/QC/extract/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.txt"
        ]            
        }
     withName: MEGAHIT {
        ext.args = [
            '--min-contig-len 1000',
            '--presets meta-sensitive'
            ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/assembly/megahit/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.fa.gz"
        ]
        }
     withName: QUAST {
        publishDir = [
            path: { "${params.outdir}/assembly/quast/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.tsv"
        ]
        }
     withName: METAPHLAN {
        ext.args = [
        '--unclassified_estimation'
        ]
        publishDir = [
            path: { "${params.outdir}/taxonomy/metaphlan/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.txt"
        ]
        }
     withName: HEATMAPS {
        publishDir = [
            path: { "${params.outdir}/taxonomy/heatmaps/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.png"
        ]
        }
     withName: FILTER_ABUNDANCE {
        publishDir = [
            path: { "${params.outdir}/taxonomy/filter/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.txt"
        ]
        }
     withName: MERGE_ABUNDANCE {
        publishDir = [
            path: { "${params.outdir}/taxonomy/merge/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.txt"
        ]
        }
    withName: DOWNLOADREF {
        publishDir = [
            path: { "${params.outdir}/simulation/reference/accession/"},
            mode: params.publish_dir_mode
        ]
        }
    withName: DOWNLOADGENOME {
        publishDir = [
            path: { "${params.outdir}/simulation/reference/download/"},
            mode: params.publish_dir_mode,
            pattern: "*.{fna.gz}"
        ]
        }
    withName: RAGTAGSCAFFOLD {
        publishDir = [
            path: { "${params.outdir}/simulation/ragtag/scaffold/"},
            mode: params.publish_dir_mode
        ]
        }
        withName: RAGTAGPATCH {
        publishDir = [
            path: { "${params.outdir}/simulation/ragtag/patch/"},
            mode: params.publish_dir_mode
        ]
        }
       withName: NEATPAIRED {
        publishDir = [
            path: { "${params.outdir}/simulation/neat/"},
            mode: params.publish_dir_mode
        ]
        }
       withName: CATCOPYNUMBER {
        publishDir = [
            path: { "${params.outdir}/simulation/copy/"},
            mode: params.publish_dir_mode
        ]
        }
       withName: CATISOLATES {
        publishDir = [
            path: { "${params.outdir}/simulation/isolates/"},
            mode: params.publish_dir_mode
        ]
        }
       withName: CATMETAGENOMICS {
        publishDir = [
            path: { "${params.outdir}/simulation/meta/"},
            mode: params.publish_dir_mode
        ]
        }
       withName: FASTQC_SIM {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/simulation/fastqc/sim/" },
            mode: params.publish_dir_mode,
            pattern: "*.html"
        ]
        ext.prefix = { "${meta.id}_sim"}
    }
    withName: ABRICATE {
        publishDir = [
            path: { "${params.outdir}/amr/abricate/" },
            mode: params.publish_dir_mode,
            pattern: "*.tsv"
        ]
    }
       withName: RGI {
        ext.args = '--local'
        ext.args2 = [
            '--local',
            '--clean'
        ]
        publishDir = [
            path: { "${params.outdir}/amr/rgi/" },
            mode: params.publish_dir_mode,
            pattern: "*.{tsv, json}"
        ]
    }
    withName: AMRFINDERPLUS {
        publishDir = [
            path: { "${params.outdir}/amr/amrfinderplus/" },
            mode: params.publish_dir_mode,
            pattern: "*.tsv"
        ]
    }
    withName: HAMRONIZATION_ABRICATE {
        publishDir = [
            path: { "${params.outdir}/amr/hamronization/abricate/" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${report}.abricate" }
    }
    withName: HAMRONIZATION_AMRFINDERPLUS {
        publishDir = [
            path: { "${params.outdir}/amr/hamronization/amrfinderplus/" },
            mode: params.publish_dir_mode
        ]
        ext.prefix = { "${report}.amrfinderplus" }
    }
    withName: HAMRONIZATION_RGI {
        publishDir = [
            path: { "${params.outdir}/amr/hamronization/rgi/" },
            mode: params.publish_dir_mode,
        ]
        ext.prefix = { "${report}.rgi" }
    }

    withName: HAMRONIZATION_SUMMARIZE {
        publishDir = [
            path: { "${params.outdir}/amr/hamronization/summarize/" },
            mode: params.publish_dir_mode
        ]
    }
}
