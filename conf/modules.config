/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    publishDir = [ 
        path: { 
            "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/${type}" }, 
            mode: params.publish_dir_mode, saveAs: { filename -> filename.equals('versions.yml') ? null : filename } ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info/" },
            mode: params.publish_dir_mode,
            saveAs: { filename.equals('versions.yml') ? null : filename }
        ]
    }

        withName: ISOLATE_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info/" },
            mode: params.publish_dir_mode,
            saveAs: { filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/versions" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

        withName: MULTIQC {
        publishDir = [
            path: { "${params.outdir}/multiqc/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { 
                "${params.outdir}/QC/fastqc/raw/"
            },
            mode: params.publish_dir_mode,
            pattern: "*.html"
        ]
        ext.prefix = { 
            "${meta.id}_raw"
        }
    }

    withName: FASTQC_CLEAN {
        ext.args = '--quiet'
        publishDir = [
            path: { 
                def type = task.ext.simulated ? 'simulated' : 'clean'
                "${params.outdir}/QC/fastqc/${type}/"
            },
            mode: params.publish_dir_mode,
            pattern: "*.html"
        ]
        ext.prefix = { 
            def type = task.ext.simulated ? 'simulated' : 'clean'
            "${meta.id}_${type}"
        }
    }

    withName: FASTP {
        ext.args = [
            "--cut_front",
            "--cut_tail",
            "--average_qual 20",
            "--length_required 50"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/QC/fastp/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{json,html,log}"
        ]
        ext.prefix = { "${meta.id}" }
    }

    withName: BBDUK {
        publishDir = [
            path: { "${params.outdir}/QC/bbduk/" },
            mode: params.publish_dir_mode,
            pattern: "*.log"
        ]
    }

    withName: HOSTILE {
        publishDir = [
            path: { "${params.outdir}/QC/hostile/" },
            mode: params.publish_dir_mode,
            pattern: "*.log"
        ]
    }

    withName: EXTRACT_READ_LENGTH {
        publishDir = [
            path: { "${params.outdir}/QC/extract/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.txt"
        ]            
    }

    withName: MEGAHIT {
        ext.args = [
            '--min-contig-len 1000',
            '--presets meta-sensitive'
        ].join(' ').trim()
        publishDir = [
            path: { 
                "${params.outdir}/assembly/megahit/"
            },
            mode: params.publish_dir_mode,
            pattern: "*.fa.gz"
        ]
    }

    withName: QUAST {
        publishDir = [
            path: { 
                "${params.outdir}/assembly/quast/"
            },
            mode: params.publish_dir_mode,
            pattern: "*.tsv"
        ]
    }

    withName: 'METAPHLAN_DB' {
        publishDir = [
            enabled: false
        ]
    }

    withName: METAPHLAN {
        ext.args = [
            '--unclassified_estimation'
        ]
        publishDir = [
            path: { 
                "${params.outdir}/taxonomy/metaphlan/"
            },
            mode: params.publish_dir_mode,
            pattern: "*.txt"
        ]
    }

    withName: HEATMAPS {
        publishDir = [
            path: { 
                "${params.outdir}/taxonomy/heatmaps/"
            },
            mode: params.publish_dir_mode,
            pattern: "*.png"
        ]
    }

    withName: FILTER_ABUNDANCE {
        publishDir = [
            path: { 
                "${params.outdir}/taxonomy/filter/"
            },
            mode: params.publish_dir_mode,
            pattern: "*.txt"
        ]
    }

    withName: MERGE_ABUNDANCE {
        publishDir = [
            path: { 
                "${params.outdir}/taxonomy/merge/"
            },
            mode: params.publish_dir_mode,
            pattern: "*.txt"
        ]
    }

    withName: DOWNLOADREF {
        publishDir = [
            path: { "${params.outdir}/simulation/reference/accession/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: DOWNLOADGENOME {
        publishDir = [
            path: { "${params.outdir}/simulation/reference/download/" },
            mode: params.publish_dir_mode,
            pattern: "*.{fna.gz}"
        ]
    }

    withName: LOCALISOLATE {
        publishDir = [
            path: { "${params.outdir}/simulation/localisolates/" },
            mode: params.publish_dir_mode,
            pattern: "*.{fna}"
        ]
    }

    withName: RAGTAGSCAFFOLD {
        publishDir = [
            path: { "${params.outdir}/simulation/ragtag/scaffold/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: RAGTAGPATCH {
        publishDir = [
            path: { "${params.outdir}/simulation/ragtag/patch/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: NEATPAIRED {
        publishDir = [
            path: { "${params.outdir}/simulation/neat/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: CATCOPYNUMBER {
        publishDir = [
            path: { "${params.outdir}/simulation/copynum/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: CATISOLATES {
        publishDir = [
            path: { "${params.outdir}/simulation/catisolates/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: CATMETAGENOMICS {
        publishDir = [
            path: { "${params.outdir}/simulation/catmeta/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: FASTQC_SIM {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/simulation/fastqc/sim/" },
            mode: params.publish_dir_mode,
            pattern: "*.html"
        ]
        ext.prefix = { "${meta.id}_sim" }
    }

    withName: ABRICATE {
        publishDir = [
            enabled: false
        ]
    }

    withName: RGI {
        ext.args = '--local'
        ext.args2 = [
            '--local',
            '--clean'
        ]
        publishDir = [
            enabled: false
        ]
    }

    withName: AMRFINDERPLUS {
        publishDir = [
            enabled: false
        ]
    }

    withName: HAMRONIZATION_ABRICATE {
        publishDir = [
            enabled: false
        ]
        ext.prefix = { "${report}.abricate" }
    }

    withName: HAMRONIZATION_AMRFINDERPLUS {
        publishDir = [
            enabled: false
        ]
        ext.prefix = { "${report}.amrfinderplus" }
    }

    withName: HAMRONIZATION_RGI {
        publishDir = [
            enabled: false
        ]
        ext.prefix = { "${report}.rgi" }
    }

    withName: HAMRONIZATION_SUMMARIZE {
        publishDir = [
            path: {              
                "${params.outdir}/amr/hamronization/summarize/" },
            mode: params.publish_dir_mode,
            pattern: "*.{tsv,html,json}"
        ]
    }
}

if (params.postsim) {
    process {
        withName: 'ASTRO:TAXASIM:METAPHLAN_DB' {
            publishDir = [
                enabled: false
            ]
        }
        withName: 'ASTRO:TAXASIM:METAPHLAN' {
            publishDir = [
                path: { "${params.outdir}/simulation/taxonomy/metaphlan/" },
                mode: params.publish_dir_mode,
                pattern: "*.txt"
            ]
        }
        withName: 'ASTRO:TAXASIM:MERGE_ABUNDANCE' {
            publishDir = [
                path: { "${params.outdir}/simulation/taxonomy/merge/" },
                mode: params.publish_dir_mode,
                pattern: "*.txt"
            ]
        }
        withName: 'ASTRO:TAXASIM:FILTER_ABUNDANCE' {
            publishDir = [
                path: { "${params.outdir}/simulation/taxonomy/filter/" },
                mode: params.publish_dir_mode,
                pattern: "*.txt"
            ]
        }
        withName: 'ASTRO:TAXASIM:HEATMAPS' {
            publishDir = [
                path: { "${params.outdir}/simulation/taxonomy/heatmaps/" },
                mode: params.publish_dir_mode,
                pattern: "*.png"
            ]
        }
        withName: 'ASTRO:CONTIGSIM:MEGAHIT' {
            ext.args = [
                '--min-contig-len 1000',
                '--presets meta-sensitive'
            ].join(' ').trim()
            publishDir = [
                path: { "${params.outdir}/simulation/assembly/megahit/" },
                mode: params.publish_dir_mode,
                pattern: "*.fa.gz"
            ]
        }
        withName: 'ASTRO:CONTIGSIM:QUAST' {
            publishDir = [
                path: { "${params.outdir}/simulation/assembly/quast/" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv"
            ]
        }
        withName: 'ASTRO:AMRSIM:ABRICATE' {
            publishDir = [
                enabled: false
            ]
        }
        withName: 'ASTRO:AMRSIM:HAMRONIZATION_ABRICATE' {
            publishDir = [
                enabled: false
            ]
            ext.prefix = { "${report}.abricate" }
        }
        withName: 'ASTRO:AMRSIM:AMRFINDERPLUS' {
            publishDir = [
                enabled: false
            ]
        }
        withName: 'ASTRO:AMRSIM:HAMRONIZATION_AMRFINDERPLUS' {
            publishDir = [
                enabled: false
            ]
            ext.prefix = { "${report}.amrfinderplus" }
        }
        withName: 'ASTRO:AMRSIM:RGI' {
            ext.args = '--local'
            ext.args2 = [
                '--local',
                '--clean'
            ]
            publishDir = [
                enabled: false
            ]
        }
        withName: 'ASTRO:AMRSIM:HAMRONIZATION_RGI' {
            publishDir = [
                enabled: false
            ]
            ext.prefix = { "${report}.rgi" }
        }
        withName: 'ASTRO:AMRSIM:HAMRONIZATION_SUMMARIZE' {
            publishDir = [
                path: { "${params.outdir}/simulation/amr/hamronization/summarize/" },
                mode: params.publish_dir_mode,
                pattern: "*.{tsv,html,json}"
            ]
        }
    }
}
